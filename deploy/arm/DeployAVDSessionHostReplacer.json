{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "9583483459513955518"
    }
  },
  "parameters": {
    "applicationInsightsName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the Application Insights resource."
      }
    },
    "appServicePlanName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the app service plan resource."
      }
    },
    "azureBlobsPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the Azure Blobs private DNS zone."
      }
    },
    "azureFilesPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the Azure Files private DNS zone."
      }
    },
    "azureQueuesPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the Azure Queues private DNS zone."
      }
    },
    "azureTablesPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the Azure Tables private DNS zone."
      }
    },
    "delegatedSubnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the delegated subnet for the function app."
      }
    },
    "drainGracePeriodHours": {
      "type": "int",
      "defaultValue": 24,
      "metadata": {
        "description": "Required: No | Number of hours to wait before draining a session host."
      }
    },
    "entraIdEnvironmentName": {
      "type": "string",
      "defaultValue": "Global",
      "allowedValues": [
        "China",
        "Global",
        "USGov",
        "USGovDoD"
      ],
      "metadata": {
        "description": "Required: No | The environment name of the Entra ID tenant for connecting to Microsoft Graph."
      }
    },
    "fixSessionHostTags": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Required: No | Choose whether the session host replacer will fix the tags on existing session hosts or if tags are mistakenly deleted. The tag values will NOT allow deletion of existing session hosts and must be changed post deployment. This is useful if you are deploying a new session host replacer to an existing host pool."
      }
    },
    "functionAppName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the function app resource."
      }
    },
    "functionAppNetworkInterfaceName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the network interface resource for the function app."
      }
    },
    "functionAppPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the private DNS zone for the function app."
      }
    },
    "functionAppPrivateEndpointName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the private endpoint resource for the function app."
      }
    },
    "functionAppScmPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the private DNS zone for the SCM endpoint of the function app."
      }
    },
    "functionAppZipUrl": {
      "type": "string",
      "defaultValue": "https://github.com/Azure/AVDSessionHostReplacer/releases/download/v0.2.7/FunctionApp.zip",
      "metadata": {
        "description": "Required: No | URL to the zip file for the function app. Ideally, this ZIP file should be hosted in Azure Blobs in a private container."
      }
    },
    "hostPoolResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the AVD host pool."
      }
    },
    "identityServiceProvider": {
      "type": "string",
      "allowedValues": [
        "EntraID",
        "ActiveDirectory",
        "EntraDS"
      ],
      "metadata": {
        "description": "Required: Yes | Identity service provider for the AVD session hosts."
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the key vault resource. This value must be globally unique."
      }
    },
    "keyVaultNetworkInterfaceName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the network interface resource for the key vault."
      }
    },
    "keyVaultPrivateDnsZoneResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the private DNS zone for the key vault."
      }
    },
    "keyVaultPrivateEndpointName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the private endpoint resource for the key vault."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Required: No | Region of the Function App. This does not need to be the same as the location of the Azure Virtual Desktop Host Pool. | Default: Location of the resource group."
      }
    },
    "logAnalyticsWorkspaceResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the Log Analytics Workspace used by Application Insights to monitor the Function App."
      }
    },
    "privateLinkScopeResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the private DNS zone for the private link scope."
      }
    },
    "replaceSessionHostOnNewImageVersion": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Required: No | Choose whether to replace the AVD session host when a new image version is available."
      }
    },
    "replaceSessionHostOnNewImageVersionDelayDays": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Required: No | Number of days to wait before replacing the AVD session host when a new image version is available."
      }
    },
    "sessionHostsResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource group name for the AVD session hosts."
      }
    },
    "shrDeploymentPrefix": {
      "type": "string",
      "defaultValue": "AVDSessionHostReplacer",
      "metadata": {
        "description": "Required: No | The prefix of the deployment created in the session hosts resource group when replacement VMs are deploying. This is used to track running and failed deployments."
      }
    },
    "storageAccountDiagnosticSettingName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Required: No | Name of the diagnostic setting for the storage account resource. This value is only required when a log analytics workspace resource ID is specified."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the storage account resource. This resource is required for the function app."
      }
    },
    "storageAccountNetworkInterfaceName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the network interface resource for the storage account."
      }
    },
    "storageAccountPrivateEndpointName": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Name of the private endpoint resource for the storage account."
      }
    },
    "subnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the subnet for the AVD session hosts."
      }
    },
    "tagDeployTimestamp": {
      "type": "string",
      "defaultValue": "AutoReplaceDeployTimestamp",
      "metadata": {
        "description": "Required: No | Tag used to determine when the session host was deployed. This is updated by the session host replacer function on new session hosts. After deployment, you can edit the value of this tag to force replace a VM."
      }
    },
    "tagIncludeInAutomation": {
      "type": "string",
      "defaultValue": "IncludeInAutoReplace",
      "metadata": {
        "description": "Required: No | Tag used to determine if an existing session host should be included in the automation. After deployment, if the tag is present and set to \"true\", the session host will be included. If the tag is not present or set to \"false\", the session host will be excluded."
      }
    },
    "tagPendingDrainTimestamp": {
      "type": "string",
      "defaultValue": "AutoReplacePendingDrainTimestamp",
      "metadata": {
        "description": "Required: No | Tag used to determine when the session host was marked for drain. This is updated by the session host replacer function on hosts pending deletion."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Required: No | Tags to apply to the resources."
      }
    },
    "tagScalingPlanExclusionTag": {
      "type": "string",
      "defaultValue": "ScalingPlanExclusion",
      "metadata": {
        "description": "Required: No | Tag used by session host replacer to exclude a session host from scaling plan actions."
      }
    },
    "targetVMAgeDays": {
      "type": "int",
      "defaultValue": 45,
      "metadata": {
        "description": "Required: No | Number of days to wait before replacing the AVD session host when a new image version is available."
      }
    },
    "templateParametersUri": {
      "type": "object",
      "metadata": {
        "description": "Required: Yes | URI for the parameters file needed for the template spec deployment to deploy new AVD session hosts."
      }
    },
    "templateSpecVersionResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the template spec version resource."
      }
    },
    "timeStamp": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Required: No | Value used to generate unique names for the deployments. Do not supply a value for this parameter."
      }
    },
    "userAssignedIdentityName": {
      "type": "string",
      "metadata": {
        "description": "Required: No | Name of the user assigned identity to support customer managed keys on the storage account."
      }
    },
    "userAssignedIdentityResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required: Yes | Resource ID of the user assigned identity to support the function app. The resource group name in this value is used as the deployment scope for all resources."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Authorization/roleDefinitions",
      "apiVersion": "2022-04-01",
      "name": "[guid(subscription().id, 'Key Vault Deployment Operator')]",
      "properties": {
        "roleName": "Key Vault Deployment Operator",
        "description": "Deploy a resource manager template with the access to the secrets in the Key Vault.",
        "assignableScopes": [
          "[subscription().id]"
        ],
        "permissions": [
          {
            "actions": [
              "Microsoft.KeyVault/vaults/deploy/action"
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-user-assigned-identity-encryption-{0}', parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('userAssignedIdentityResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('userAssignedIdentityResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityName": {
            "value": "[format('{0}-Encryption', parameters('userAssignedIdentityName'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "6010960606493396717"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('userAssignedIdentityName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.ManagedIdentity/userAssignedIdentities'), createObject())]"
            }
          ],
          "outputs": {
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-key-vault-{0}', parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('userAssignedIdentityResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('userAssignedIdentityResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultNetworkInterfaceName": {
            "value": "[parameters('keyVaultNetworkInterfaceName')]"
          },
          "keyVaultPrivateDnsZoneResourceId": {
            "value": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
          },
          "keyVaultPrivateEndpointName": {
            "value": "[parameters('keyVaultPrivateEndpointName')]"
          },
          "deployActionRoleDefinitionId": {
            "value": "[guid(subscription().id, 'Key Vault Deployment Operator')]"
          },
          "subnetResourceId": {
            "value": "[parameters('subnetResourceId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-user-assigned-identity-encryption-{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-user-assigned-identity-encryption-{0}', parameters('timeStamp'))), '2022-09-01').outputs.principalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "11301093885206448383"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultNetworkInterfaceName": {
              "type": "string"
            },
            "keyVaultPrivateEndpointName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "keyExpirationInDays": {
              "type": "int",
              "defaultValue": 30
            },
            "keyVaultPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "deployActionRoleDefinitionId": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.KeyVault/vaults'), createObject())]",
              "properties": {
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": false,
                "enablePurgeProtection": true,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "ipRules": [],
                  "virtualNetworkRules": []
                },
                "publicNetworkAccess": "Disabled",
                "sku": {
                  "family": "A",
                  "name": "premium"
                },
                "softDeleteRetentionInDays": 90,
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('userAssignedIdentityResourceId'), 'e147488a-f6f5-4113-8e2d-b22465e65bf6', resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')))]",
              "properties": {
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('userAssignedIdentityResourceId'), parameters('deployActionRoleDefinitionId'), resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')))]",
              "properties": {
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('deployActionRoleDefinitionId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('keyVaultPrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject())]",
              "properties": {
                "customNetworkInterfaceName": "[parameters('keyVaultNetworkInterfaceName')]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('keyVaultPrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('keyVaultPrivateEndpointName'), parameters('keyVaultName'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('keyVaultPrivateDnsZoneResourceId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('keyVaultPrivateEndpointName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'StorageEncryptionKey')]",
              "properties": {
                "attributes": {
                  "enabled": true
                },
                "keySize": 4096,
                "kty": "RSA",
                "rotationPolicy": {
                  "attributes": {
                    "expiryTime": "[format('P{0}D', string(parameters('keyExpirationInDays')))]"
                  },
                  "lifetimeActions": [
                    {
                      "action": {
                        "type": "Notify"
                      },
                      "trigger": {
                        "timeBeforeExpiry": "P10D"
                      }
                    },
                    {
                      "action": {
                        "type": "Rotate"
                      },
                      "trigger": {
                        "timeAfterCreate": "[format('P{0}D', string(sub(parameters('keyExpirationInDays'), 7)))]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "keyName": {
              "type": "string",
              "value": "StorageEncryptionKey"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "uri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2022-07-01').vaultUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', guid(subscription().id, 'Key Vault Deployment Operator'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-user-assigned-identity-encryption-{0}', parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-storage-account-{0}', parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('userAssignedIdentityResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('userAssignedIdentityResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureBlobsPrivateDnsZoneResourceId": {
            "value": "[parameters('azureBlobsPrivateDnsZoneResourceId')]"
          },
          "azureFilesPrivateDnsZoneResourceId": {
            "value": "[parameters('azureFilesPrivateDnsZoneResourceId')]"
          },
          "azureQueuesPrivateDnsZoneResourceId": {
            "value": "[parameters('azureQueuesPrivateDnsZoneResourceId')]"
          },
          "azureTablesPrivateDnsZoneResourceId": {
            "value": "[parameters('azureTablesPrivateDnsZoneResourceId')]"
          },
          "keyName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('timeStamp'))), '2022-09-01').outputs.keyName.value]"
          },
          "keyVaultUri": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('timeStamp'))), '2022-09-01').outputs.uri.value]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceResourceId": {
            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
          },
          "storageAccountDiagnosticSettingName": {
            "value": "[parameters('storageAccountDiagnosticSettingName')]"
          },
          "storageAccountName": {
            "value": "[parameters('storageAccountName')]"
          },
          "storageAccountNetworkInterfaceName": {
            "value": "[parameters('storageAccountNetworkInterfaceName')]"
          },
          "storageAccountPrivateEndpointName": {
            "value": "[parameters('storageAccountPrivateEndpointName')]"
          },
          "subnetResourceId": {
            "value": "[parameters('subnetResourceId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "userAssignedIdentityResourceId_Encryption": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-user-assigned-identity-encryption-{0}', parameters('timeStamp'))), '2022-09-01').outputs.resourceId.value]"
          },
          "userAssignedIdentityResourceId_FunctionApp": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', split(parameters('userAssignedIdentityResourceId'), '/')[8])]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "17752844431231547933"
            }
          },
          "parameters": {
            "azureBlobsPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureFilesPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureQueuesPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "azureTablesPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "keyName": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string"
            },
            "storageAccountDiagnosticSettingName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "storageAccountNetworkInterfaceName": {
              "type": "string"
            },
            "storageAccountPrivateEndpointName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "userAssignedIdentityResourceId_Encryption": {
              "type": "string"
            },
            "userAssignedIdentityResourceId_FunctionApp": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionIds": [
              "17d1049b-9a84-46fb-8f53-869881c3d3ab",
              "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
              "974c5e8b-45b9-4653-ba55-5f855dd0fb88"
            ],
            "storagePrivateDnsZoneResourceIds": [
              "[parameters('azureBlobsPrivateDnsZoneResourceId')]",
              "[parameters('azureFilesPrivateDnsZoneResourceId')]",
              "[parameters('azureQueuesPrivateDnsZoneResourceId')]",
              "[parameters('azureTablesPrivateDnsZoneResourceId')]"
            ],
            "storageSubResources": [
              "blob",
              "file",
              "queue",
              "table"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Storage/storageAccounts'), createObject())]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userAssignedIdentityResourceId_Encryption'))]": {}
                }
              },
              "properties": {
                "accessTier": "Hot",
                "allowBlobPublicAccess": false,
                "allowCrossTenantReplication": false,
                "allowedCopyScope": "PrivateLink",
                "allowSharedKeyAccess": false,
                "azureFilesIdentityBasedAuthentication": {
                  "directoryServiceOptions": "None"
                },
                "defaultToOAuthAuthentication": true,
                "dnsEndpointType": "Standard",
                "encryption": {
                  "identity": {
                    "userAssignedIdentity": "[parameters('userAssignedIdentityResourceId_Encryption')]"
                  },
                  "requireInfrastructureEncryption": true,
                  "keyvaultproperties": {
                    "keyvaulturi": "[parameters('keyVaultUri')]",
                    "keyname": "[parameters('keyName')]"
                  },
                  "services": {
                    "file": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "table": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "queue": {
                      "keyType": "Account",
                      "enabled": true
                    },
                    "blob": {
                      "keyType": "Account",
                      "enabled": true
                    }
                  },
                  "keySource": "Microsoft.KeyVault"
                },
                "largeFileSharesState": "Disabled",
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "virtualNetworkRules": [],
                  "ipRules": [],
                  "defaultAction": "Deny"
                },
                "publicNetworkAccess": "Disabled",
                "supportsHttpsTrafficOnly": true
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "roleAssignments",
                "count": "[length(variables('roleDefinitionIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(parameters('userAssignedIdentityResourceId_FunctionApp'), variables('roleDefinitionIds')[copyIndex()], resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionIds')[copyIndex()])]",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId_FunctionApp'), '/')[2], split(parameters('userAssignedIdentityResourceId_FunctionApp'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', split(parameters('userAssignedIdentityResourceId_FunctionApp'), '/')[8]), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "privateEndpoints",
                "count": "[length(variables('storageSubResources'))]"
              },
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}-{1}', parameters('storageAccountPrivateEndpointName'), variables('storageSubResources')[copyIndex()])]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject())]",
              "properties": {
                "customNetworkInterfaceName": "[format('{0}-{1}', parameters('storageAccountNetworkInterfaceName'), variables('storageSubResources')[copyIndex()])]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-{1}', parameters('storageAccountPrivateEndpointName'), variables('storageSubResources')[copyIndex()])]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                      "groupIds": [
                        "[variables('storageSubResources')[copyIndex()]]"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "copy": {
                "name": "privateDnsZoneGroups",
                "count": "[length(variables('storageSubResources'))]"
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-11-01",
              "name": "[format('{0}/{1}', format('{0}-{1}', parameters('storageAccountPrivateEndpointName'), variables('storageSubResources')[copyIndex()]), parameters('storageAccountName'))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateDnsZoneId": "[variables('storagePrivateDnsZoneResourceIds')[copyIndex()]]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', parameters('storageAccountPrivateEndpointName'), variables('storageSubResources')[copyIndex()]))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2017-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), 'default')]",
              "name": "[parameters('storageAccountDiagnosticSettingName')]",
              "properties": {
                "logs": [
                  {
                    "category": "StorageWrite",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "Transaction",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-key-vault-{0}', parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-user-assigned-identity-encryption-{0}', parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-application-insights-{0}', parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('userAssignedIdentityResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('userAssignedIdentityResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationInsightsName": {
            "value": "[parameters('applicationInsightsName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "privateLinkScopeResourceId": {
            "value": "[parameters('privateLinkScopeResourceId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timestamp": {
            "value": "[parameters('timeStamp')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "16837093563248366099"
            }
          },
          "parameters": {
            "applicationInsightsName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "privateLinkScopeResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timestamp": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Insights/components'), createObject())]",
              "properties": {
                "Application_Type": "web",
                "publicNetworkAccessForIngestion": "Disabled",
                "publicNetworkAccessForQuery": "Disabled"
              },
              "kind": "web"
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-private-link-scope-{0}', parameters('timestamp'))]",
              "subscriptionId": "[split(parameters('privateLinkScopeResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('privateLinkScopeResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "applicationInsightsName": {
                    "value": "[parameters('applicationInsightsName')]"
                  },
                  "applicationInsightsResourceId": {
                    "value": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
                  },
                  "privateLinkScopeResourceId": {
                    "value": "[parameters('privateLinkScopeResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "9527454008361250279"
                    }
                  },
                  "parameters": {
                    "applicationInsightsName": {
                      "type": "string"
                    },
                    "applicationInsightsResourceId": {
                      "type": "string"
                    },
                    "privateLinkScopeResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                      "apiVersion": "2021-09-01",
                      "name": "[format('{0}/{1}', split(parameters('privateLinkScopeResourceId'), '/')[8], parameters('applicationInsightsName'))]",
                      "properties": {
                        "linkedResourceId": "[parameters('applicationInsightsResourceId')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
              ]
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('applicationInsightsName')]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('deploy-function-app-{0}', parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('userAssignedIdentityResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('userAssignedIdentityResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "applicationInsightsName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-application-insights-{0}', parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "appServicePlanName": {
            "value": "[parameters('appServicePlanName')]"
          },
          "delegatedSubnetResourceId": {
            "value": "[parameters('delegatedSubnetResourceId')]"
          },
          "entraIdEnvironmentName": {
            "value": "[parameters('entraIdEnvironmentName')]"
          },
          "functionAppName": {
            "value": "[parameters('functionAppName')]"
          },
          "functionAppNetworkInterfaceName": {
            "value": "[parameters('functionAppNetworkInterfaceName')]"
          },
          "functionAppPrivateDnsZoneResourceId": {
            "value": "[parameters('functionAppPrivateDnsZoneResourceId')]"
          },
          "functionAppPrivateEndpointName": {
            "value": "[parameters('functionAppPrivateEndpointName')]"
          },
          "functionAppScmPrivateDnsZoneResourceId": {
            "value": "[parameters('functionAppScmPrivateDnsZoneResourceId')]"
          },
          "functionAppZipUrl": {
            "value": "[parameters('functionAppZipUrl')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "replacementPlanSettings": {
            "value": [
              {
                "name": "_HostPoolResourceGroupName",
                "value": "[split(parameters('hostPoolResourceId'), '/')[4]]"
              },
              {
                "name": "_HostPoolName",
                "value": "[split(parameters('hostPoolResourceId'), '/')[8]]"
              },
              {
                "name": "_SessionHostTemplate",
                "value": "[parameters('templateSpecVersionResourceId')]"
              },
              {
                "name": "_DeploymentParametersUri",
                "value": "[parameters('templateParametersUri')]"
              },
              {
                "name": "_RemoveAzureADDevice",
                "value": "[equals(parameters('identityServiceProvider'), 'EntraID')]"
              },
              {
                "name": "_ClientId",
                "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', split(parameters('userAssignedIdentityResourceId'), '/')[8]), '2023-01-31').clientId]"
              },
              {
                "name": "_Tag_IncludeInAutomation",
                "value": "[parameters('tagIncludeInAutomation')]"
              },
              {
                "name": "_Tag_DeployTimestamp",
                "value": "[parameters('tagDeployTimestamp')]"
              },
              {
                "name": "_Tag_PendingDrainTimestamp",
                "value": "[parameters('tagPendingDrainTimestamp')]"
              },
              {
                "name": "_Tag_ScalingPlanExclusionTag",
                "value": "[parameters('tagScalingPlanExclusionTag')]"
              },
              {
                "name": "_TargetVMAgeDays",
                "value": "[parameters('targetVMAgeDays')]"
              },
              {
                "name": "_DrainGracePeriodHours",
                "value": "[parameters('drainGracePeriodHours')]"
              },
              {
                "name": "_FixSessionHostTags",
                "value": "[parameters('fixSessionHostTags')]"
              },
              {
                "name": "_SHRDeploymentPrefix",
                "value": "[parameters('shrDeploymentPrefix')]"
              },
              {
                "name": "_ReplaceSessionHostOnNewImageVersion",
                "value": "[parameters('replaceSessionHostOnNewImageVersion')]"
              },
              {
                "name": "_ReplaceSessionHostOnNewImageVersionDelayDays",
                "value": "[parameters('replaceSessionHostOnNewImageVersionDelayDays')]"
              },
              {
                "name": "_SessionHostResourceGroupName",
                "value": "[parameters('sessionHostsResourceGroupName')]"
              }
            ]
          },
          "storageAccountName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-storage-account-{0}', parameters('timeStamp'))), '2022-09-01').outputs.name.value]"
          },
          "subnetResourceId": {
            "value": "[parameters('subnetResourceId')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "timestamp": {
            "value": "[parameters('timeStamp')]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[parameters('userAssignedIdentityResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "17882641290495121580"
            }
          },
          "parameters": {
            "applicationInsightsName": {
              "type": "string"
            },
            "appServicePlanName": {
              "type": "string"
            },
            "delegatedSubnetResourceId": {
              "type": "string"
            },
            "entraIdEnvironmentName": {
              "type": "string"
            },
            "functionAppName": {
              "type": "string"
            },
            "functionAppNetworkInterfaceName": {
              "type": "string"
            },
            "functionAppPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "functionAppPrivateEndpointName": {
              "type": "string"
            },
            "functionAppScmPrivateDnsZoneResourceId": {
              "type": "string"
            },
            "functionAppZipUrl": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "replacementPlanSettings": {
              "type": "array"
            },
            "storageAccountName": {
              "type": "string"
            },
            "subnetResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "timestamp": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            }
          },
          "variables": {
            "cloudSuffix": "[replace(replace(environment().resourceManager, 'https://management.', ''), '/', '')]"
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2023-01-01",
              "name": "[parameters('appServicePlanName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Web/serverfarms'), createObject())]",
              "sku": {
                "name": "P1v3",
                "tier": "PremiumV3",
                "size": "P1v3",
                "family": "Pv3",
                "capacity": 1
              },
              "kind": "functionapp"
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2023-01-01",
              "name": "[parameters('functionAppName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Web/sites'), createObject())]",
              "kind": "functionapp",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('userAssignedIdentityResourceId'))]": {}
                }
              },
              "properties": {
                "clientAffinityEnabled": false,
                "httpsOnly": true,
                "publicNetworkAccess": "Disabled",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
                "siteConfig": {
                  "alwaysOn": true,
                  "appSettings": "[union(createArray(createObject('name', '_AzureEnvironmentName', 'value', environment().name), createObject('name', '_EntraEnvironmentName', 'value', parameters('entraIdEnvironmentName')), createObject('name', '_SubscriptionId', 'value', subscription().subscriptionId), createObject('name', '_TenantId', 'value', subscription().tenantId), createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString), createObject('name', 'AzureWebJobsStorage__blobServiceUri', 'value', format('https://{0}.blob.{1}', parameters('storageAccountName'), environment().suffixes.storage)), createObject('name', 'AzureWebJobsStorage__credential', 'value', 'managedidentity'), createObject('name', 'AzureWebJobsStorage__managedIdentityResourceId', 'value', parameters('userAssignedIdentityResourceId')), createObject('name', 'AzureWebJobsStorage__queueServiceUri', 'value', format('https://{0}.queue.{1}', parameters('storageAccountName'), environment().suffixes.storage)), createObject('name', 'AzureWebJobsStorage__tableServiceUri', 'value', format('https://{0}.table.{1}', parameters('storageAccountName'), environment().suffixes.storage)), createObject('name', 'FUNCTIONS_EXTENSION_VERSION', 'value', '~4'), createObject('name', 'FUNCTIONS_WORKER_RUNTIME', 'value', 'powershell'), createObject('name', 'WEBSITE_LOAD_USER_PROFILE', 'value', '1')), parameters('replacementPlanSettings'))]",
                  "cors": {
                    "allowedOrigins": [
                      "[format('{0}', environment().portal)]",
                      "[format('https://functions-next.{0}', variables('cloudSuffix'))]",
                      "[format('https://functions-staging.{0}', variables('cloudSuffix'))]",
                      "[format('https://functions.{0}', variables('cloudSuffix'))]"
                    ]
                  },
                  "ftpsState": "Disabled",
                  "netFrameworkVersion": "v6.0",
                  "powerShellVersion": "7.2",
                  "publicNetworkAccess": "Disabled",
                  "use32BitWorkerProcess": false
                },
                "virtualNetworkSubnetId": "[parameters('delegatedSubnetResourceId')]",
                "vnetContentShareEnabled": false,
                "vnetRouteAllEnabled": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-04-01",
              "name": "[parameters('functionAppPrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[coalesce(tryGet(parameters('tags'), 'Microsoft.Network/privateEndpoints'), createObject())]",
              "properties": {
                "customNetworkInterfaceName": "[parameters('functionAppNetworkInterfaceName')]",
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('functionAppPrivateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                      "groupIds": [
                        "sites"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', parameters('functionAppPrivateEndpointName'), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateDnsZoneId": "[parameters('functionAppPrivateDnsZoneResourceId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('functionAppPrivateEndpointName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/extensions",
              "apiVersion": "2023-01-01",
              "name": "[format('{0}/{1}', parameters('functionAppName'), 'MSDeploy')]",
              "properties": {
                "packageUri": "[parameters('functionAppZipUrl')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('functionAppPrivateEndpointName'), 'default')]",
                "[resourceId('Microsoft.Network/privateEndpoints', parameters('functionAppPrivateEndpointName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('deploy-scm-a-record-{0}', parameters('timestamp'))]",
              "subscriptionId": "[split(parameters('functionAppScmPrivateDnsZoneResourceId'), '/')[2]]",
              "resourceGroup": "[split(parameters('functionAppScmPrivateDnsZoneResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "functionAppName": {
                    "value": "[parameters('functionAppName')]"
                  },
                  "ipv4Address": {
                    "value": "[filter(reference(resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('functionAppPrivateEndpointName'), 'default'), '2021-08-01').privateDnsZoneConfigs[0].properties.recordSets, lambda('record', equals(lambdaVariables('record').recordSetName, parameters('functionAppName'))))[0].ipAddresses[0]]"
                  },
                  "privateDnsZoneName": {
                    "value": "[split(parameters('functionAppScmPrivateDnsZoneResourceId'), '/')[8]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "7030409442479244335"
                    }
                  },
                  "parameters": {
                    "functionAppName": {
                      "type": "string"
                    },
                    "ipv4Address": {
                      "type": "string"
                    },
                    "privateDnsZoneName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('functionAppName'))]",
                      "properties": {
                        "aRecords": [
                          {
                            "ipv4Address": "[parameters('ipv4Address')]"
                          }
                        ],
                        "ttl": 3600
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('functionAppPrivateEndpointName'), 'default')]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-application-insights-{0}', parameters('timeStamp')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.Resources/deployments', format('deploy-storage-account-{0}', parameters('timeStamp')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-rbac-hostPool-{0}', parameters('timeStamp'))]",
      "resourceGroup": "[split(parameters('hostPoolResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hostPoolResourceId": {
            "value": "[parameters('hostPoolResourceId')]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', split(parameters('userAssignedIdentityResourceId'), '/')[8]), '2023-01-31').principalId]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[parameters('userAssignedIdentityResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "15042231137032127952"
            }
          },
          "parameters": {
            "hostPoolResourceId": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DesktopVirtualization/hostPools/{0}', split(parameters('hostPoolResourceId'), '/')[8])]",
              "name": "[guid(parameters('userAssignedIdentityResourceId'), 'a959dbd1-f747-45e3-8ba6-dd80f235f97c', parameters('hostPoolResourceId'))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-rbac-AVD-{0}', parameters('timeStamp'))]",
      "resourceGroup": "[parameters('sessionHostsResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', split(parameters('userAssignedIdentityResourceId'), '/')[8]), '2023-01-31').principalId]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[parameters('userAssignedIdentityResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "10597390424879154548"
            }
          },
          "parameters": {
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('userAssignedIdentityResourceId'), 'a959dbd1-f747-45e3-8ba6-dd80f235f97c', resourceGroup().id)]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-rbac-template-spec-{0}', parameters('timeStamp'))]",
      "subscriptionId": "[split(parameters('templateSpecVersionResourceId'), '/')[2]]",
      "resourceGroup": "[split(parameters('templateSpecVersionResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "templateSpecName": {
            "value": "[split(parameters('templateSpecVersionResourceId'), '/')[8]]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', split(parameters('userAssignedIdentityResourceId'), '/')[8]), '2023-01-31').principalId]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[parameters('userAssignedIdentityResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "1944757596580131843"
            }
          },
          "parameters": {
            "templateSpecName": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Resources/templateSpecs/{0}', parameters('templateSpecName'))]",
              "name": "[guid(parameters('userAssignedIdentityResourceId'), '392ae280-861d-42bd-9ea5-08ee6d83b80e', resourceId('Microsoft.Resources/templateSpecs', parameters('templateSpecName')))]",
              "properties": {
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '392ae280-861d-42bd-9ea5-08ee6d83b80e')]"
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('assign-rbac-AVD-{0}', parameters('timeStamp'))]",
      "resourceGroup": "[split(parameters('subnetResourceId'), '/')[4]]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subnetResourceId": {
            "value": "[parameters('subnetResourceId')]"
          },
          "userAssignedIdentityPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('userAssignedIdentityResourceId'), '/')[2], split(parameters('userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', split(parameters('userAssignedIdentityResourceId'), '/')[8]), '2023-01-31').principalId]"
          },
          "userAssignedIdentityResourceId": {
            "value": "[parameters('userAssignedIdentityResourceId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "220099957547532271"
            }
          },
          "parameters": {
            "subnetResourceId": {
              "type": "string"
            },
            "userAssignedIdentityPrincipalId": {
              "type": "string"
            },
            "userAssignedIdentityResourceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', split(parameters('subnetResourceId'), '/')[8])]",
              "name": "[guid(parameters('userAssignedIdentityResourceId'), 'a959dbd1-f747-45e3-8ba6-dd80f235f97c', resourceId('Microsoft.Network/virtualNetworks', split(parameters('subnetResourceId'), '/')[8]))]",
              "properties": {
                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]"
              }
            }
          ]
        }
      }
    }
  ]
}